// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// GoodsCategoryDao is the data access object for table tb_newbee_mall_goods_category.
type GoodsCategoryDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns GoodsCategoryColumns // columns contains all the column names of Table for convenient usage.
}

// GoodsCategoryColumns defines and stores column names for table tb_newbee_mall_goods_category.
type GoodsCategoryColumns struct {
	CategoryId    string // 分类id
	CategoryLevel string // 分类级别(1-一级分类 2-二级分类 3-三级分类)
	ParentId      string // 父分类id
	CategoryName  string // 分类名称
	CategoryRank  string // 排序值(字段越大越靠前)
	IsDeleted     string // 删除标识字段(0-未删除 1-已删除)
	CreateTime    string // 创建时间
	CreateUser    string // 创建者id
	UpdateTime    string // 修改时间
	UpdateUser    string // 修改者id
}

//  goodsCategoryColumns holds the columns for table tb_newbee_mall_goods_category.
var goodsCategoryColumns = GoodsCategoryColumns{
	CategoryId:    "category_id",
	CategoryLevel: "category_level",
	ParentId:      "parent_id",
	CategoryName:  "category_name",
	CategoryRank:  "category_rank",
	IsDeleted:     "is_deleted",
	CreateTime:    "create_time",
	CreateUser:    "create_user",
	UpdateTime:    "update_time",
	UpdateUser:    "update_user",
}

// NewGoodsCategoryDao creates and returns a new DAO object for table data access.
func NewGoodsCategoryDao() *GoodsCategoryDao {
	return &GoodsCategoryDao{
		group:   "default",
		table:   "tb_newbee_mall_goods_category",
		columns: goodsCategoryColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *GoodsCategoryDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *GoodsCategoryDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *GoodsCategoryDao) Columns() GoodsCategoryColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *GoodsCategoryDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *GoodsCategoryDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *GoodsCategoryDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
